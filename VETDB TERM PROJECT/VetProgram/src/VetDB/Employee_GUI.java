/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VetDB;

import java.sql.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.util.Random;

public class Employee_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Employee_GUI
     */
    public Employee_GUI() {
        initComponents();
    }

    public Employee_GUI(Connection conn, boolean vet) {
        initComponents();
        this.conn = conn;

        if (!vet) {
            jButton2.setVisible(false);
        }

        loadPetInfoTable();
        loadEditPetInfo();
        loadDeletePet();
        amountLabel.setVisible(false);
        amountToPaySpinner.setVisible(false);
        billTable.setVisible(false);
        confirmPaymentButton.setVisible(false);
        cancelPaymentButton.setVisible(false);
        selectBillButton.setVisible(false);
        ownerNotFoundLabel.setVisible(false);

        selectPetApptButton.setVisible(false);
        jLabel15.setVisible(false);
        jLabel16.setVisible(false);
        jLabel18.setVisible(false);
        confirmApptButton.setVisible(false);
        selectDateCalendar.setVisible(false);
        apptReasonField.setVisible(false);
        apptTimeField.setVisible(false);
        apptPetTable.setVisible(false);

        loadEditOwner();
        loadOwnerInfoTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewPetInfoTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        editPetInfoTable = new javax.swing.JTable();
        editPetInfoButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        editPetNameBox = new javax.swing.JTextField();
        editAgeBox = new javax.swing.JTextField();
        updatePetInfoButton = new javax.swing.JButton();
        cancelPetInfoUpdateButton = new javax.swing.JButton();
        updatePetInfoResultLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        petNameField = new javax.swing.JTextField();
        speciesField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        addPetButton = new javax.swing.JButton();
        sexDropdown = new javax.swing.JComboBox<>();
        ageSpinner = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        deletePetTable = new javax.swing.JTable();
        selectDeletePet = new javax.swing.JButton();
        deleteVerifyLabel = new javax.swing.JLabel();
        noButton = new javax.swing.JButton();
        yesButton = new javax.swing.JButton();
        deletePetResultLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        billFirstNameField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        billLastNameField = new javax.swing.JTextField();
        viewBillButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        selectBillButton = new javax.swing.JButton();
        amountLabel = new javax.swing.JLabel();
        confirmPaymentButton = new javax.swing.JButton();
        amountToPaySpinner = new javax.swing.JSpinner();
        cancelPaymentButton = new javax.swing.JButton();
        ownerNotFoundLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        selectDateCalendar = new com.toedter.calendar.JDateChooser();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        apptPetTable = new javax.swing.JTable();
        apptFirstNameField = new javax.swing.JTextField();
        apptLastNameField = new javax.swing.JTextField();
        selectPetApptButton = new javax.swing.JButton();
        apptTimeField = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        confirmApptButton = new javax.swing.JButton();
        apptReasonField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        apptViewPetsButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        editOwnerTable = new javax.swing.JTable();
        editOwnerButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        editPhoneField = new javax.swing.JFormattedTextField();
        editAddressField = new javax.swing.JTextField();
        editOwnerUpdateButton = new javax.swing.JButton();
        editOwnerCancelButton = new javax.swing.JButton();
        editOwnerResultLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        newPhoneField = new javax.swing.JFormattedTextField();
        newAddressField = new javax.swing.JTextField();
        newFnameField = new javax.swing.JTextField();
        newLnameField = new javax.swing.JTextField();
        addOwnerButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        newBillFnameField = new javax.swing.JTextField();
        newBillLnameField = new javax.swing.JTextField();
        newBillTotalAmountSpinner = new javax.swing.JSpinner();
        newBillFirstBillSpinner = new javax.swing.JSpinner();
        addNewBillButton = new javax.swing.JButton();
        billDateCalendar = new com.toedter.calendar.JDateChooser();
        jLabel28 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        viewOwnerInfoTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        viewPetInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet name", "Sex", "Species", "Age", "Owner name", "Owner phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewPetInfoTable);
        if (viewPetInfoTable.getColumnModel().getColumnCount() > 0) {
            viewPetInfoTable.getColumnModel().getColumn(4).setHeaderValue("Owner name");
            viewPetInfoTable.getColumnModel().getColumn(5).setHeaderValue("Owner phone");
        }

        jButton1.setText("LOGOUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Return to vet screen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("View Pet Info", jPanel1);

        editPetInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet Name", "Species", "Owner name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(editPetInfoTable);

        editPetInfoButton.setText("Edit Selected Pet");
        editPetInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPetInfoButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Pet name:");

        jLabel2.setText("Age:");

        editPetNameBox.setText("test");

        editAgeBox.setText("test");

        updatePetInfoButton.setText("Update");
        updatePetInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePetInfoButtonActionPerformed(evt);
            }
        });

        cancelPetInfoUpdateButton.setText("Cancel Changes");
        cancelPetInfoUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPetInfoUpdateButtonActionPerformed(evt);
            }
        });

        updatePetInfoResultLabel.setText("test");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(updatePetInfoResultLabel))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(editAgeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(updatePetInfoButton)))
                                .addGap(41, 41, 41)
                                .addComponent(cancelPetInfoUpdateButton)
                                .addGap(93, 93, 93))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(editPetNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(editPetInfoButton)
                        .addGap(78, 78, 78))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(editPetInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(editPetNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(editAgeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelPetInfoUpdateButton)
                            .addComponent(updatePetInfoButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(updatePetInfoResultLabel)
                        .addGap(20, 20, 20))))
        );

        jTabbedPane1.addTab("Edit Pet Info", jPanel2);

        jLabel3.setText("Pet name:");

        jLabel4.setText("Age:");

        jLabel5.setText("Sex:");

        jLabel6.setText("Species:");

        jLabel7.setText("First name:");

        jLabel8.setText("Last name:");

        jLabel9.setText("Pet Info");

        jLabel10.setText("Owner Info");

        addPetButton.setText("Add Pet");
        addPetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPetButtonActionPerformed(evt);
            }
        });

        sexDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M", "F" }));

        ageSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(addPetButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel9)
                        .addGap(215, 215, 215)
                        .addComponent(jLabel10))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(speciesField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(petNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(86, 86, 86)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(firstNameField)
                                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(sexDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(166, 334, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addGap(48, 48, 48)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(petNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(sexDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(speciesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(addPetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add New Pet", jPanel3);

        deletePetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet Name", "Species", "Owner name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(deletePetTable);

        selectDeletePet.setText("Delete Selected Pet");
        selectDeletePet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDeletePetActionPerformed(evt);
            }
        });

        deleteVerifyLabel.setText("Are you sure?");

        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });

        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        deletePetResultLabel.setText("test");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteVerifyLabel)
                            .addComponent(noButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(deletePetResultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectDeletePet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(94, 94, 94))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(deletePetResultLabel)
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(selectDeletePet, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteVerifyLabel)
                        .addGap(38, 38, 38)))
                .addComponent(yesButton)
                .addGap(18, 18, 18)
                .addComponent(noButton)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Delete Pet", jPanel4);

        jLabel11.setText("First name:");

        jLabel12.setText("Last name:");

        viewBillButton.setText("View Bills");
        viewBillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBillButtonActionPerformed(evt);
            }
        });

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Due date", "Installment", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(billTable);

        selectBillButton.setText("Pay Selected Bill");
        selectBillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBillButtonActionPerformed(evt);
            }
        });

        amountLabel.setText("Amount to pay:");

        confirmPaymentButton.setText("Confirm");
        confirmPaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPaymentButtonActionPerformed(evt);
            }
        });

        amountToPaySpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 25.0d));

        cancelPaymentButton.setText("Cancel");
        cancelPaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPaymentButtonActionPerformed(evt);
            }
        });

        ownerNotFoundLabel.setText("Owner not found");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(billFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewBillButton)
                                    .addComponent(billLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ownerNotFoundLabel))))
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(selectBillButton)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(confirmPaymentButton)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(amountLabel)
                                .addGap(18, 18, 18)
                                .addComponent(amountToPaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cancelPaymentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(94, 94, 94))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(billFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(billLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(viewBillButton))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(selectBillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ownerNotFoundLabel)
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountLabel)
                    .addComponent(amountToPaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(confirmPaymentButton)
                .addGap(11, 11, 11)
                .addComponent(cancelPaymentButton)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pay Bill", jPanel5);

        selectDateCalendar.setDateFormatString("yyyy-MM-dd");

        jLabel13.setText("First name:");

        jLabel14.setText("Last name:");

        apptPetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet name", "Species"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(apptPetTable);

        selectPetApptButton.setText("Select Pet");
        selectPetApptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPetApptButtonActionPerformed(evt);
            }
        });

        apptTimeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("hh:mm"))));

        jLabel15.setText("Date:");

        jLabel16.setText("Time:");

        confirmApptButton.setText("Confirm Appointment");
        confirmApptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmApptButtonActionPerformed(evt);
            }
        });

        jLabel18.setText("Reason:");

        apptViewPetsButton.setText("View Pets");
        apptViewPetsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apptViewPetsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(apptFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addComponent(apptLastNameField))
                            .addComponent(apptViewPetsButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(selectPetApptButton)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel16))
                                .addGap(33, 33, 33))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(apptTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addComponent(confirmApptButton))
                            .addComponent(selectDateCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(apptReasonField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(selectPetApptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(apptFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(apptLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(apptViewPetsButton))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectDateCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apptTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(confirmApptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(apptReasonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        selectDateCalendar.getJCalendar().setMinSelectableDate(new Date());

        jTabbedPane1.addTab("Schedule Appointment", jPanel6);

        editOwnerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(editOwnerTable);

        editOwnerButton.setText("Edit Selected Owner");
        editOwnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOwnerButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Address:");

        jLabel19.setText("Phone:");

        editPhoneField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##########"))));

        editOwnerUpdateButton.setText("Update Owner");
        editOwnerUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOwnerUpdateButtonActionPerformed(evt);
            }
        });

        editOwnerCancelButton.setText("Cancel");
        editOwnerCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOwnerCancelButtonActionPerformed(evt);
            }
        });

        editOwnerResultLabel.setText("Owner updated successfully");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(editOwnerButton))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel17))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(editOwnerUpdateButton)
                                .addGap(52, 52, 52)
                                .addComponent(editOwnerCancelButton))
                            .addComponent(editOwnerResultLabel))))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(editOwnerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(editAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editOwnerUpdateButton)
                    .addComponent(editOwnerCancelButton))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(editPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(editOwnerResultLabel)))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Edit Owner Info", jPanel9);

        jLabel20.setText("First name:");

        jLabel21.setText("Last name:");

        jLabel22.setText("Phone:");

        jLabel23.setText("Address:");

        newPhoneField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##########"))));

        addOwnerButton.setText("Add Owner");
        addOwnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOwnerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newLnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newFnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(addOwnerButton)))
                .addContainerGap(426, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(newFnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(newLnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(newPhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(newAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(addOwnerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add New Owner", jPanel7);

        jLabel24.setText("Total amount:");

        jLabel25.setText("Owner's first name:");

        jLabel26.setText("Owner's last name:");

        jLabel27.setText("First bill:");

        newBillTotalAmountSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 25.0d));

        newBillFirstBillSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 25.0d));

        addNewBillButton.setText("Add Bill");
        addNewBillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewBillButtonActionPerformed(evt);
            }
        });

        billDateCalendar.setDateFormatString("yyyy-MM-dd");

        jLabel28.setText("Date:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel27))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newBillFirstBillSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newBillTotalAmountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newBillFnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel28))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(billDateCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newBillLnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(addNewBillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(500, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(newBillTotalAmountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(newBillFirstBillSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(newBillFnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(newBillLnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(billDateCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addGap(38, 38, 38)
                .addComponent(addNewBillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        billDateCalendar.getJCalendar().setMinSelectableDate(new Date());

        jTabbedPane1.addTab("Add Bill", jPanel8);

        viewOwnerInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Address", "Phone", "Num of pets", "Num of bills"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(viewOwnerInfoTable);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Owner Info", jPanel10);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPetButtonActionPerformed
        if (verifyAddPet()) {
            try {
                String insertPet = "insert into PET(petname,sex,species,age) values ('" + petNameField.getText()
                        + "', '" + sexDropdown.getSelectedItem().toString()
                        + "', '" + speciesField.getText()
                        + "', '" + ageSpinner.getValue()
                        + "')";

                Statement s1 = conn.createStatement();
                s1.executeUpdate(insertPet);

                int ownerID;
                int petID;

                String getOwnerID = "select owner_id from OWNER where fname = '" + firstNameField.getText() + "' and lname = '" + lastNameField.getText() + "'";
                Statement s2 = conn.createStatement();
                ResultSet r1 = s2.executeQuery(getOwnerID);
                r1.next();
                ownerID = r1.getInt("owner_id");

                String getPetID = "select pet_id from PET where petname = '" + petNameField.getText() + "' and sex = '" + sexDropdown.getSelectedItem() + "' and species = '" + speciesField.getText() + "' and age = " + ageSpinner.getValue();
                Statement s3 = conn.createStatement();
                ResultSet r2 = s3.executeQuery(getPetID);
                r2.next();
                petID = r2.getInt("pet_id");

                String insertOwns = "insert into OWNS(owner_id,pet_id) values ('" + ownerID + "', '" + petID + "')";
                Statement s4 = conn.createStatement();
                s4.executeUpdate(insertOwns);

                JOptionPane.showMessageDialog(null, "Pet successfully added!");

                petNameField.setText("");
                ageSpinner.setValue(0);
                sexDropdown.setSelectedIndex(0);
                speciesField.setText("");
                firstNameField.setText("");
                lastNameField.setText("");
                reload();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error adding pet\nOwner does not exist!");
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error adding pet\nEmpty field(s)");
        }
    }//GEN-LAST:event_addPetButtonActionPerformed

    private void cancelPetInfoUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPetInfoUpdateButtonActionPerformed
        jLabel1.setVisible(false);
        jLabel2.setVisible(false);
        updatePetInfoResultLabel.setVisible(false);
        updatePetInfoButton.setVisible(false);
        cancelPetInfoUpdateButton.setVisible(false);
        editPetNameBox.setVisible(false);
        editAgeBox.setVisible(false);
        editPetInfoTable.clearSelection();
        updatePetInfoResultLabel.setText("Update Cancelled");
        updatePetInfoResultLabel.setVisible(true);

    }//GEN-LAST:event_cancelPetInfoUpdateButtonActionPerformed

    private void updatePetInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePetInfoButtonActionPerformed
        try {
            String update = "update PET set petname = '" + editPetNameBox.getText() + "', age = '" + editAgeBox.getText() + "' where pet_id=" + petToUpdate;
            Statement s = conn.createStatement();
            int x = s.executeUpdate(update);
            loadEditPetInfo();
            DefaultTableModel model = (DefaultTableModel) editPetInfoTable.getModel();
            model.getDataVector().removeAllElements();
            pets.clear();
            editPetInfoTable.clearSelection();
            loadEditPetInfo();
            updatePetInfoResultLabel.setText("Update Successful!");
            updatePetInfoResultLabel.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updatePetInfoButtonActionPerformed

    private void editPetInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPetInfoButtonActionPerformed
        int selectedRow = editPetInfoTable.getSelectedRow();
        if (selectedRow != -1) {
            try {
                updatePetInfoResultLabel.setVisible(false);
                petToUpdate = pets.get(selectedRow);
                String query = "select petname,age from PET where pet_id=" + petToUpdate;
                Statement s = conn.createStatement();
                ResultSet r = s.executeQuery(query);

                r.next();
                editPetNameBox.setText(r.getString("petname"));
                editPetNameBox.setVisible(true);
                editAgeBox.setText(r.getString("age"));
                editAgeBox.setVisible(true);
                jLabel1.setVisible(true);
                jLabel2.setVisible(true);
                updatePetInfoButton.setVisible(true);
                cancelPetInfoUpdateButton.setVisible(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_editPetInfoButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        java.awt.EventQueue.invokeLater(() -> {
            new Veterinarian_GUI(conn).setVisible(true);
        });
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        java.awt.EventQueue.invokeLater(() -> {
            new Login_GUI().setVisible(true);
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void selectDeletePetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDeletePetActionPerformed
        int selectedRow = deletePetTable.getSelectedRow();
        if (selectedRow != -1) {
            deletePetResultLabel.setVisible(false);
            petToDelete = pets.get(selectedRow);
            deleteVerifyLabel.setVisible(true);
            yesButton.setVisible(true);
            noButton.setVisible(true);
        }
    }//GEN-LAST:event_selectDeletePetActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        deleteVerifyLabel.setVisible(false);
        yesButton.setVisible(false);
        noButton.setVisible(false);
        deletePetResultLabel.setText("Delete cancelled");
        deletePetResultLabel.setVisible(true);
    }//GEN-LAST:event_noButtonActionPerformed

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        try {
            String deletePet = "delete from PET where pet_id = " + petToDelete;
            Statement s = conn.createStatement();
            s.executeUpdate(deletePet);
            reload();
            deletePetTable.clearSelection();
            deletePetResultLabel.setText("Pet successfully deleted!");
            deletePetResultLabel.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_yesButtonActionPerformed

    private void viewBillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBillButtonActionPerformed
        if (testString(billFirstNameField.getText()) && testString(billLastNameField.getText())) {
            try {
                loadBills();
                billTable.setVisible(true);
                selectBillButton.setVisible(true);
            } catch (SQLException e) {
                ownerNotFoundLabel.setVisible(true);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_viewBillButtonActionPerformed

    private void selectBillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBillButtonActionPerformed
        int selectedRow = billTable.getSelectedRow();
        if (selectedRow != -1) {
            billToPay = bills.get(selectedRow);
            confirmPaymentButton.setVisible(true);
            cancelPaymentButton.setVisible(true);
            amountToPaySpinner.setVisible(true);
            amountLabel.setVisible(true);
        }
    }//GEN-LAST:event_selectBillButtonActionPerformed

    private void confirmPaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmPaymentButtonActionPerformed
        double payment = (double) amountToPaySpinner.getValue();
        if (payment != 0) {
            try {
                String query = "select * from BILL where bill_id = " + billToPay;
                Statement s = conn.createStatement();
                ResultSet r = s.executeQuery(query);
                r.next();

                double change = 0;
                double installment = r.getDouble("balance");
                double total = r.getDouble("tot_amount");
                Date due_date = r.getDate("due_date");

                DecimalFormat df = new DecimalFormat("#.00");
                if (payment >= total) {
                    String delete = "delete from BILL where bill_id = " + billToPay;
                    Statement s1 = conn.createStatement();
                    s1.executeUpdate(delete);
                    JOptionPane.showMessageDialog(null, "Bill has been paid in full!");

                    if (payment > total) {
                        change = payment - total;
                        JOptionPane.showMessageDialog(null, "Change due: $" + df.format(change));
                    }
                } else {
                    SimpleDateFormat dateF = new SimpleDateFormat("yyyy-MM-dd");
                    if (payment >= installment) {
                        Date new_date = new Date(due_date.getYear(), ((due_date.getMonth() + 1) % 12), due_date.getDate());
                        String pay = "update BILL set tot_amount = " + (total - payment) + ", due_date = '" + dateF.format(new_date) + "', balance = " + ((total - payment) * .25) + " where bill_id = " + billToPay;
                        Statement s2 = conn.createStatement();
                        s2.executeUpdate(pay);
                        JOptionPane.showMessageDialog(null, "$" + df.format(payment) + " has been put towards the bill. $" + df.format(total - payment) + " left to pay\n\n$" + df.format((total - payment) * .25) + " is due on " + dateF.format(new_date));
                    } else {
                        String pay = "update BILL set tot_amount = " + (total - payment) + ", balance = " + (installment - payment) + " where bill_id = " + billToPay;
                        Statement s2 = conn.createStatement();
                        s2.executeUpdate(pay);
                        JOptionPane.showMessageDialog(null, "$" + df.format(payment) + " has been put towards the bill. $" + df.format(total - payment) + " left to pay\n\n$" + df.format((installment - payment)) + " is due on " + dateF.format(due_date));
                    }
                }

                billTable.clearSelection();
                loadBills();
                amountLabel.setVisible(false);
                amountToPaySpinner.setVisible(false);
                confirmPaymentButton.setVisible(false);
                cancelPaymentButton.setVisible(false);
                amountToPaySpinner.setValue(0);

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_confirmPaymentButtonActionPerformed

    private void cancelPaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPaymentButtonActionPerformed
        amountLabel.setVisible(false);
        amountToPaySpinner.setVisible(false);
        confirmPaymentButton.setVisible(false);
        cancelPaymentButton.setVisible(false);
        billTable.clearSelection();
    }//GEN-LAST:event_cancelPaymentButtonActionPerformed

    private void selectPetApptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPetApptButtonActionPerformed
        int selectedRow = apptPetTable.getSelectedRow();
        if (selectedRow != -1) {
            petForAppt = petAppt.get(selectedRow);
            jLabel15.setVisible(true);
            jLabel16.setVisible(true);
            jLabel18.setVisible(true);
            confirmApptButton.setVisible(true);
            selectDateCalendar.setVisible(true);
            apptReasonField.setVisible(true);
            apptTimeField.setVisible(true);

        }
    }//GEN-LAST:event_selectPetApptButtonActionPerformed

    private void confirmApptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmApptButtonActionPerformed
        if (testString(selectDateCalendar.getDate().toString()) && testString(apptReasonField.getText()) && testString(apptTimeField.getText())) {
            try {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                String formatDate = df.format(selectDateCalendar.getDate());
                String insertAppt = "insert into APPOINTMENT (app_date,app_time,reason) values ('" + formatDate + "', '" + apptTimeField.getText() + "', '" + apptReasonField.getText() + "')";
                Statement s = conn.createStatement();
                s.executeUpdate(insertAppt);

                String getAppt = "select apt_id from APPOINTMENT where app_date='" + formatDate + "' and app_time='" + apptTimeField.getText() + "' and reason='" + apptReasonField.getText() + "'";
                Statement s1 = conn.createStatement();
                ResultSet r = s1.executeQuery(getAppt);
                r.next();
                int appID = r.getInt("apt_id");

                String getVets = "select vet_id from VETERINARIAN";
                ArrayList<Integer> vets = new ArrayList<Integer>();
                Statement s2 = conn.createStatement();
                ResultSet r1 = s2.executeQuery(getVets);
                while (r1.next()) {
                    vets.add(r1.getInt("vet_id"));
                }

                Random rand = new Random();
                int vetID = vets.get(rand.nextInt(vets.size()));
                String getName = "select name from VETERINARIAN where vet_id=" + vetID;
                Statement s3 = conn.createStatement();
                ResultSet r2 = s3.executeQuery(getName);
                r2.next();
                String vetName = r2.getString("name");

                String insertSched = "insert into SCHEDULED (apt_id,pet_id,vet_id) values ('" + appID + "', '" + petForAppt + "', '" + vetID + "')";
                Statement s4 = conn.createStatement();
                s4.executeUpdate(insertSched);

                JOptionPane.showMessageDialog(null, "Appointment has been scheduled with Doctor " + vetName + "\nOn " + formatDate + " at " + apptTimeField.getText());

                apptPetTable.setVisible(false);
                selectPetApptButton.setVisible(false);
                jLabel15.setVisible(false);
                jLabel16.setVisible(false);
                jLabel18.setVisible(false);
                confirmApptButton.setVisible(false);
                selectDateCalendar.setVisible(false);
                apptReasonField.setVisible(false);
                apptTimeField.setVisible(false);
                selectDateCalendar.setDate(null);
                apptReasonField.setText("");
                apptTimeField.setText("");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_confirmApptButtonActionPerformed

    private void apptViewPetsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apptViewPetsButtonActionPerformed
        if (testString(apptFirstNameField.getText()) && testString(apptLastNameField.getText())) {
            try {
                String query = "select PET.pet_id,petname,species from OWNER join OWNS on OWNER.owner_id = OWNS.owner_id join PET on PET.pet_id = OWNS.pet_id where fname='" + apptFirstNameField.getText() + "' and lname='" + apptLastNameField.getText() + "'";
                Statement s = conn.createStatement();
                ResultSet r = s.executeQuery(query);
                petAppt = new ArrayList<Integer>();
                DefaultTableModel model = (DefaultTableModel) apptPetTable.getModel();
                model.getDataVector().removeAllElements();
                while (r.next()) {
                    model.addRow(new Object[]{r.getString("petname"), r.getString("species")});
                    petAppt.add(r.getInt("pet_id"));
                }
                apptPetTable.setVisible(true);
                selectPetApptButton.setVisible(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_apptViewPetsButtonActionPerformed

    private void editOwnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOwnerButtonActionPerformed
        int selectedRow = editOwnerTable.getSelectedRow();
        if (selectedRow != -1) {
            ownerToEdit = owners.get(selectedRow);
            try {
                String query = "select phone,address from OWNER where owner_id=" + ownerToEdit;
                Statement s = conn.createStatement();
                ResultSet r = s.executeQuery(query);
                r.next();

                jLabel17.setVisible(true);
                jLabel19.setVisible(true);
                editAddressField.setText(r.getString("address"));
                editPhoneField.setText(r.getString("phone"));
                editAddressField.setVisible(true);
                editPhoneField.setVisible(true);
                editOwnerUpdateButton.setVisible(true);
                editOwnerCancelButton.setVisible(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_editOwnerButtonActionPerformed

    private void editOwnerUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOwnerUpdateButtonActionPerformed
        try {
            String update = "update OWNER set phone = '" + editPhoneField.getText() + "', address = '" + editAddressField.getText() + "' where owner_id=" + ownerToEdit;
            Statement s = conn.createStatement();
            s.executeUpdate(update);
            editOwnerResultLabel.setVisible(true);
            JOptionPane.showMessageDialog(null, "Owner information successfully updated!");
            loadEditOwner();
            reload();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_editOwnerUpdateButtonActionPerformed

    private void editOwnerCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOwnerCancelButtonActionPerformed
        editOwnerTable.clearSelection();
        jLabel17.setVisible(false);
        jLabel19.setVisible(false);
        editAddressField.setVisible(false);
        editPhoneField.setVisible(false);
        editOwnerUpdateButton.setVisible(false);
        editOwnerCancelButton.setVisible(false);
    }//GEN-LAST:event_editOwnerCancelButtonActionPerformed

    private void addOwnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOwnerButtonActionPerformed
        if (verifyAddOwner()) {
            try {
                String insert = "insert into OWNER (fname,lname,phone,address) values ('" + newFnameField.getText() + "', '" + newLnameField.getText() + "', '" + newPhoneField.getText() + "', '" + newAddressField.getText() + "')";
                Statement s = conn.createStatement();
                s.executeUpdate(insert);
                JOptionPane.showMessageDialog(null, "New owner added successfully!");
                newFnameField.setText("");
                newLnameField.setText("");
                newPhoneField.setText("");
                newAddressField.setText("");
                reload();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error adding owner\nEmpty field(s)");
        }
    }//GEN-LAST:event_addOwnerButtonActionPerformed

    private void addNewBillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewBillButtonActionPerformed
        if (!verifyNewBill()) {
            JOptionPane.showMessageDialog(null, "Error adding bill\nEmpty field(s)");
        } else if (!verifyNewBillOwner()) {
            JOptionPane.showMessageDialog(null, "Error adding bill\nOwner does not exist!");
        } else {
            try {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                String insertBill = "insert into BILL (balance,tot_amount,due_date) values ('" + newBillFirstBillSpinner.getValue() + "', '" + newBillTotalAmountSpinner.getValue() + "', '" + df.format(billDateCalendar.getDate()) + "')";
                Statement s = conn.createStatement();
                s.executeUpdate(insertBill);

                String getBillID = "select bill_id from BILL where balance = " + newBillFirstBillSpinner.getValue() + " and tot_amount = " + newBillTotalAmountSpinner.getValue() + " and due_date = '" + df.format(billDateCalendar.getDate()) + "'";
                Statement s1 = conn.createStatement();
                ResultSet r = s1.executeQuery(getBillID);
                r.next();
                int billID = r.getInt("bill_id");

                String insertPays = "insert into PAYS (bill_id,owner_id) values ('" + billID + "', '" + newBillOwner + "')";
                Statement s3 = conn.createStatement();
                s3.executeUpdate(insertPays);

                JOptionPane.showMessageDialog(null, "Bill added successfully!");

                newBillTotalAmountSpinner.setValue(0);
                newBillFirstBillSpinner.setValue(0);
                newBillFnameField.setText("");
                newBillLnameField.setText("");
                billDateCalendar.setDate(null);

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_addNewBillButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Employee_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Employee_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Employee_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Employee_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Employee_GUI().setVisible(true);
            }
        });
    }

    private void loadPetInfoTable() {
        try {
            String query = "select * from PET join OWNS on PET.pet_id = OWNS.pet_id join OWNER on OWNER.owner_id = OWNS.owner_id";
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) viewPetInfoTable.getModel();
            while (r.next()) {
                model.addRow(new Object[]{r.getString("petname"), r.getString("sex"), r.getString("species"), r.getString("age"), (r.getString("fname") + " " + r.getString("lname")), r.getString("phone")});
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadEditPetInfo() {
        try {
            jLabel1.setVisible(false);
            jLabel2.setVisible(false);
            updatePetInfoResultLabel.setVisible(false);
            updatePetInfoButton.setVisible(false);
            cancelPetInfoUpdateButton.setVisible(false);
            editPetNameBox.setVisible(false);
            editAgeBox.setVisible(false);
            pets = new ArrayList<Integer>();
            String query = "select PET.pet_id,PET.petname,PET.species,OWNER.fname,OWNER.lname from PET join OWNS on PET.pet_id = OWNS.pet_id join OWNER on OWNER.owner_id = OWNS.owner_id";
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) editPetInfoTable.getModel();
            while (r.next()) {
                model.addRow(new Object[]{r.getString("petname"), r.getString("species"), (r.getString("fname") + " " + r.getString("lname"))});
                pets.add(r.getInt("pet_id"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadBills() throws SQLException {
        String query = "select * from OWNER join PAYS on OWNER.owner_id = PAYS.owner_id"
                + " join BILL on BILL.bill_id = PAYS.bill_id"
                + " where fname='" + billFirstNameField.getText() + "' and lname='" + billLastNameField.getText() + "'";
        Statement s = conn.createStatement();
        ResultSet r = s.executeQuery(query);
        bills = new ArrayList<Integer>();
        DecimalFormat df = new DecimalFormat("#.00");
        DefaultTableModel model = (DefaultTableModel) billTable.getModel();
        model.getDataVector().removeAllElements();
        while (r.next()) {
            model.addRow(new Object[]{r.getString("due_date"), df.format(r.getDouble("balance")), df.format(r.getDouble("tot_amount"))});
            bills.add(r.getInt("bill_id"));
        }
    }

    private boolean verifyNewBillOwner() {
        try {
            String getOwnerID = "select owner_id from OWNER where fname = '" + newBillFnameField.getText() + "' and lname = '" + newBillLnameField.getText() + "'";
            Statement s2 = conn.createStatement();
            ResultSet r1 = s2.executeQuery(getOwnerID);
            r1.next();
            newBillOwner = r1.getInt("owner_id");
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void reload() {
        pets.clear();
        DefaultTableModel model1 = (DefaultTableModel) viewPetInfoTable.getModel();
        model1.getDataVector().removeAllElements();
        loadPetInfoTable();

        DefaultTableModel model2 = (DefaultTableModel) editPetInfoTable.getModel();
        model2.getDataVector().removeAllElements();
        loadEditPetInfo();

        DefaultTableModel model3 = (DefaultTableModel) deletePetTable.getModel();
        model3.getDataVector().removeAllElements();
        loadDeletePet();

        DefaultTableModel model4 = (DefaultTableModel) viewOwnerInfoTable.getModel();
        model4.getDataVector().removeAllElements();
        loadOwnerInfoTable();
        
        loadEditOwner();

    }

    //Used by addPetButton to test if data has been entered
    private boolean verifyAddPet() {
        if (!testString(petNameField.getText())) {
            return false;
        }
        if (!testString(speciesField.getText())) {
            return false;
        }
        if (!testString(firstNameField.getText())) {
            return false;
        }
        if (!testString(lastNameField.getText())) {
            return false;
        }
        return true;
    }

    private boolean testString(String s) {
        return (s != null && !s.equals(""));
    }

    private void loadDeletePet() {

        try {
            deletePetResultLabel.setVisible(false);
            yesButton.setVisible(false);
            noButton.setVisible(false);
            deleteVerifyLabel.setVisible(false);
            String query = "select PET.pet_id,PET.petname,PET.species,OWNER.fname,OWNER.lname from PET join OWNS on PET.pet_id = OWNS.pet_id join OWNER on OWNER.owner_id = OWNS.owner_id";
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) deletePetTable.getModel();
            while (r.next()) {
                model.addRow(new Object[]{r.getString("petname"), r.getString("species"), (r.getString("fname") + " " + r.getString("lname"))});

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadEditOwner() {
        try {
            editOwnerTable.clearSelection();
            editOwnerResultLabel.setVisible(false);
            jLabel17.setVisible(false);
            jLabel19.setVisible(false);
            editAddressField.setVisible(false);
            editPhoneField.setVisible(false);
            editOwnerUpdateButton.setVisible(false);
            editOwnerCancelButton.setVisible(false);

            String query = "select owner_id,fname,lname from OWNER";
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);
            owners = new ArrayList<Integer>();
            DefaultTableModel model = (DefaultTableModel) editOwnerTable.getModel();
            model.getDataVector().removeAllElements();
            while (r.next()) {
                model.addRow(new Object[]{(r.getString("fname") + " " + r.getString("lname"))});
                owners.add(r.getInt("owner_id"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private boolean verifyAddOwner() {
        if (!testString(newPhoneField.getText())) {
            return false;
        }
        if (!testString(newAddressField.getText())) {
            return false;
        }
        if (!testString(newFnameField.getText())) {
            return false;
        }
        if (!testString(newLnameField.getText())) {
            return false;
        }
        return true;
    }

    private boolean verifyNewBill() {
        if (!testString(newBillFnameField.getText())) {
            return false;
        }
        if (!testString(newBillLnameField.getText())) {
            return false;
        }
        if ((double) newBillTotalAmountSpinner.getValue() == 0) {
            return false;
        }
        if ((double) newBillFirstBillSpinner.getValue() == 0) {
            return false;
        }
        if (billDateCalendar.getDate() == null) {
            return false;
        }
        if (!testString(billDateCalendar.getDate().toString())) {
            return false;
        }
        return true;
    }

    private void loadOwnerInfoTable() {
        try {
            String query = "select * from OWNER";
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);
            
            String query2;
            String query3;
            
            DefaultTableModel model = (DefaultTableModel) viewOwnerInfoTable.getModel();
            while (r.next()) {
                query2 = "select count(*) as tot_pets from OWNS where owner_id = " + r.getInt("owner_id");
                Statement s2 = conn.createStatement();
                ResultSet r2 = s2.executeQuery(query2);
                r2.next();
                
                query3 = "select count(*) as tot_bills from PAYS where owner_id = " + r.getInt("owner_id");
                Statement s3 = conn.createStatement();
                ResultSet r3 = s3.executeQuery(query3);
                r3.next();
                
                model.addRow(new Object[]{(r.getString("fname") + " " + r.getString("lname")), r.getString("address"), r.getString("phone"), r2.getString("tot_pets"), r3.getString("tot_bills")});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewBillButton;
    private javax.swing.JButton addOwnerButton;
    private javax.swing.JButton addPetButton;
    private javax.swing.JSpinner ageSpinner;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JSpinner amountToPaySpinner;
    private javax.swing.JTextField apptFirstNameField;
    private javax.swing.JTextField apptLastNameField;
    private javax.swing.JTable apptPetTable;
    private javax.swing.JTextField apptReasonField;
    private javax.swing.JFormattedTextField apptTimeField;
    private javax.swing.JButton apptViewPetsButton;
    private com.toedter.calendar.JDateChooser billDateCalendar;
    private javax.swing.JTextField billFirstNameField;
    private javax.swing.JTextField billLastNameField;
    private javax.swing.JTable billTable;
    private javax.swing.JButton cancelPaymentButton;
    private javax.swing.JButton cancelPetInfoUpdateButton;
    private javax.swing.JButton confirmApptButton;
    private javax.swing.JButton confirmPaymentButton;
    private javax.swing.JLabel deletePetResultLabel;
    private javax.swing.JTable deletePetTable;
    private javax.swing.JLabel deleteVerifyLabel;
    private javax.swing.JTextField editAddressField;
    private javax.swing.JTextField editAgeBox;
    private javax.swing.JButton editOwnerButton;
    private javax.swing.JButton editOwnerCancelButton;
    private javax.swing.JLabel editOwnerResultLabel;
    private javax.swing.JTable editOwnerTable;
    private javax.swing.JButton editOwnerUpdateButton;
    private javax.swing.JButton editPetInfoButton;
    private javax.swing.JTable editPetInfoTable;
    private javax.swing.JTextField editPetNameBox;
    private javax.swing.JFormattedTextField editPhoneField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField newAddressField;
    private javax.swing.JSpinner newBillFirstBillSpinner;
    private javax.swing.JTextField newBillFnameField;
    private javax.swing.JTextField newBillLnameField;
    private javax.swing.JSpinner newBillTotalAmountSpinner;
    private javax.swing.JTextField newFnameField;
    private javax.swing.JTextField newLnameField;
    private javax.swing.JFormattedTextField newPhoneField;
    private javax.swing.JButton noButton;
    private javax.swing.JLabel ownerNotFoundLabel;
    private javax.swing.JTextField petNameField;
    private javax.swing.JButton selectBillButton;
    private com.toedter.calendar.JDateChooser selectDateCalendar;
    private javax.swing.JButton selectDeletePet;
    private javax.swing.JButton selectPetApptButton;
    private javax.swing.JComboBox<String> sexDropdown;
    private javax.swing.JTextField speciesField;
    private javax.swing.JButton updatePetInfoButton;
    private javax.swing.JLabel updatePetInfoResultLabel;
    private javax.swing.JButton viewBillButton;
    private javax.swing.JTable viewOwnerInfoTable;
    private javax.swing.JTable viewPetInfoTable;
    private javax.swing.JButton yesButton;
    // End of variables declaration//GEN-END:variables
    private Connection conn;
    private ArrayList<Integer> pets;
    private ArrayList<Integer> petAppt;
    private int petToUpdate;
    private int petToDelete;
    private int billToPay;
    private ArrayList<Integer> bills;
    private int petForAppt;
    private int ownerToEdit;
    private ArrayList<Integer> owners;
    private int newBillOwner;
}
