/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VetDB;

import static java.lang.Double.parseDouble;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

public class Owner_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Owner_GUI
     */
    public Owner_GUI() {
        initComponents();
    }

    public Owner_GUI(int userID, Connection conn) {
        initComponents();
        this.userID = userID;
        this.conn = conn;
        getOwnerID();
        loadUserInfo();
        loadPetInfo();
        loadMedRecInfo();
        loadAppointmentInfo();
        loadBillingInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        numOfPetsLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        petTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        medRecTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        medicaltable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        panel1 = new java.awt.Panel();
        jScrollPane3 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        viewDetailsButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        petNameDetailLabel = new javax.swing.JLabel();
        apptDateDetailLabel = new javax.swing.JLabel();
        apptTimeDetailLabel = new javax.swing.JLabel();
        reasonDetailLabel = new javax.swing.JLabel();
        vetDetailLabel = new javax.swing.JLabel();
        panel2 = new java.awt.Panel();
        jScrollPane4 = new javax.swing.JScrollPane();
        billingTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        totalInstallmentsLabel = new javax.swing.JLabel();
        totalBalanceLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setText("Num of pets:");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel3.setText("Address:");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel4.setText("Phone:");

        numOfPetsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        numOfPetsLabel.setText("test");

        nameLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        nameLabel.setText("test");

        addressLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        addressLabel.setText("test");

        phoneLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        phoneLabel.setText("test");

        jButton1.setText("LOGOUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numOfPetsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(341, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameLabel))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addressLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numOfPetsLabel))
                .addGap(93, 93, 93)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("My Info", jPanel1);

        petTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet Name", "Age", "Sex", "Species", "Num of medicines"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(petTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 915, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 41, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("My Pets", jPanel2);

        medRecTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet name", "Medicine", "Prescription date", "Refills", "Dosage", "Instructions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(medRecTable);
        if (medRecTable.getColumnModel().getColumnCount() > 0) {
            medRecTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            medRecTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            medRecTable.getColumnModel().getColumn(2).setPreferredWidth(250);
            medRecTable.getColumnModel().getColumn(4).setPreferredWidth(150);
            medRecTable.getColumnModel().getColumn(5).setPreferredWidth(850);
        }

        medicaltable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet Name", "Issue", "Date", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(medicaltable);

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel12.setText("MEDICINE RECORDS");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel13.setText("MEDICAL RECORDS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel13))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
                            .addComponent(jScrollPane5))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Medical Records", jPanel3);

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet name", "Appointment date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(appointmentTable);

        viewDetailsButton.setText("View More Details");
        viewDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Pet name:");

        jLabel6.setText("Appointment date:");

        jLabel7.setText("Appointment time:");

        jLabel8.setText("Reason for visit:");

        jLabel9.setText("Veterinarian:");

        petNameDetailLabel.setText("test");

        apptDateDetailLabel.setText("test");

        apptTimeDetailLabel.setText("test");

        reasonDetailLabel.setText("test");

        vetDetailLabel.setText("test");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(apptDateDetailLabel)
                            .addComponent(petNameDetailLabel)
                            .addComponent(apptTimeDetailLabel)
                            .addComponent(reasonDetailLabel)
                            .addComponent(vetDetailLabel)))
                    .addComponent(viewDetailsButton))
                .addGap(117, 117, 117))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(viewDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(petNameDetailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(apptDateDetailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(apptTimeDetailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(reasonDetailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(vetDetailLabel)))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Appointments", panel1);

        billingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Due date", "Installment amount", "Current balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(billingTable);

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel10.setText("Total of Balances:");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel11.setText("Total Installments:");

        totalInstallmentsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        totalInstallmentsLabel.setText("$0");

        totalBalanceLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        totalBalanceLabel.setText("$0");

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addGap(34, 34, 34)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalBalanceLabel)
                            .addComponent(totalInstallmentsLabel))
                        .addGap(322, 322, 322))))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(totalInstallmentsLabel))
                .addGap(18, 18, 18)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(totalBalanceLabel))
                .addGap(93, 93, 93))
        );

        jTabbedPane1.addTab("Bills", panel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsButtonActionPerformed
        int selectedRow = appointmentTable.getSelectedRow();
        if (selectedRow != -1) {
            try {
                String query = "select *"
                        + "from SCHEDULED join OWNS on SCHEDULED.pet_id = OWNS.pet_id join APPOINTMENT on APPOINTMENT.apt_id = SCHEDULED.apt_id "
                        + "join PET on SCHEDULED.pet_id = PET.pet_id and OWNS.pet_id = PET.pet_id join VETERINARIAN on VETERINARIAN.vet_id = SCHEDULED.vet_id "
                        + "where owner_id = " + ownerID + " and SCHEDULED.pet_id = " + pets.get(selectedRow);
                Statement s = conn.createStatement();
                ResultSet r = s.executeQuery(query);

                while (r.next()) {
                    petNameDetailLabel.setText(r.getString("petname"));
                    apptDateDetailLabel.setText(r.getString("app_date"));
                    apptTimeDetailLabel.setText(r.getString("app_time"));
                    reasonDetailLabel.setText(r.getString("reason"));
                    vetDetailLabel.setText(r.getString("name"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            petNameDetailLabel.setVisible(true);
            apptDateDetailLabel.setVisible(true);
            apptTimeDetailLabel.setVisible(true);
            reasonDetailLabel.setVisible(true);
            vetDetailLabel.setVisible(true);
            jLabel5.setVisible(true);
            jLabel6.setVisible(true);
            jLabel7.setVisible(true);
            jLabel8.setVisible(true);
            jLabel9.setVisible(true);
        }
    }//GEN-LAST:event_viewDetailsButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        java.awt.EventQueue.invokeLater(() -> {
                new Login_GUI().setVisible(true);
            });
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Owner_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Owner_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Owner_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Owner_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>   

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Owner_GUI().setVisible(true);
            }
        });
    }

    /*Retrieves the owner_id of the current user and stores it in the ownerID variable
      Doing this simplifies queries */
    private void getOwnerID() {
        try {
            String query = "select * from OWNER where user_id=" + userID;
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            while (r.next()) {
                ownerID = r.getInt("owner_id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /*Loads the owner's info into the "My Info" tab of the GUI
      Includes Owner's name, address, phone, number of pets */
    private void loadUserInfo() {
        try {
            String query = "select * from OWNER where user_id=" + userID;
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            while (r.next()) {
                Statement countPets = conn.createStatement();
                ResultSet res = countPets.executeQuery("select count(*) as pet_total from OWNER join OWNS on OWNER.owner_id = OWNS.owner_id where OWNER.user_id = " + userID);

                nameLabel.setText(r.getString("fname") + " " + r.getString("lname"));
                res.next();
                numOfPetsLabel.setText(res.getString("pet_total"));
                addressLabel.setText(r.getString("address"));
                phoneLabel.setText(r.getString("phone"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /*Loads the owner's pet's info into the "My Pets" tab
      Includes pet's name, age, sex, species, and number of medicines */
    private void loadPetInfo() {
        try {
            String query = "select * from PET join OWNS on PET.pet_id = OWNS.pet_id where owner_id = " + ownerID;
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) petTable.getModel();

            while (r.next()) {
                Statement meds = conn.createStatement();
                ResultSet res = meds.executeQuery("select count(*) as total_meds from HAS_MEDS where pet_id = " + r.getString("pet_id"));
                res.next();
                model.addRow(new Object[]{r.getString("petname"), r.getString("age"), r.getString("sex"), r.getString("species"), res.getString("total_meds")});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /*Loads the medical records of the pets owned by current owner
      Includes pet's name, medicine name, prescription date */
    private void loadMedRecInfo() {
        try {
            String query = "select petname,medicine,per_date,refills,dosage,instructions from PET join OWNS on PET.pet_id = OWNS.pet_id join HAS_MEDS on HAS_MEDS.pet_id = PET.pet_id join MED_REC on MED_REC.med_id = HAS_MEDS.med_id where owner_id = " + ownerID;
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) medRecTable.getModel();

            while (r.next()) {
                model.addRow(new Object[]{r.getString("petname"), r.getString("medicine"), r.getString("per_date"), r.getString("refills"), r.getString("dosage"), r.getString("instructions")});
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            String query = "select petname,recdate,issue,description from PET join HAS_RECS on PET.pet_id = HAS_RECS.pet_id join MEDICAL_REC on HAS_RECS.rec_id = MEDICAL_REC.rec_id join OWNS on PET.pet_id = OWNS.pet_id and OWNS.pet_id = HAS_RECS.pet_id where owner_id = " + ownerID;
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) medicaltable.getModel();

            while (r.next()) {
                model.addRow(new Object[]{r.getString("petname"), r.getString("issue"), r.getString("recdate"), r.getString("description")});
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /*Loads the appointment information
      Initially prints pet name and appointment date in a table
      Select a row and hit the "View more details" button to view:
      -Pet name
      -Appointment date
      -Appointment time
      -Reason for the appointment
      -Veterinarian assigned */
    private void loadAppointmentInfo() {
        try {
            petNameDetailLabel.setVisible(false);
            apptDateDetailLabel.setVisible(false);
            apptTimeDetailLabel.setVisible(false);
            reasonDetailLabel.setVisible(false);
            vetDetailLabel.setVisible(false);
            jLabel5.setVisible(false);
            jLabel6.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            jLabel9.setVisible(false);
            pets = new ArrayList<Integer>();

            String query = "select petname,app_date,SCHEDULED.pet_id from SCHEDULED join OWNS on SCHEDULED.pet_id = OWNS.pet_id join APPOINTMENT on APPOINTMENT.apt_id = SCHEDULED.apt_id join PET on SCHEDULED.pet_id = PET.pet_id and OWNS.pet_id = PET.pet_id where owner_id = " + ownerID;
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) appointmentTable.getModel();

            while (r.next()) {
                model.addRow(new Object[]{r.getString("petname"), r.getString("app_date")});
                pets.add(r.getInt("pet_id"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /*Loads billing information
      Shows each bill's due date, installment, remaining balance, and the pet the bill is for
      Also includes total of installments and total of balances */
    private void loadBillingInfo() {
        try {
            String query = "select *"
                    + " from PAYS join BILL on PAYS.bill_id = BILL.bill_id"
                    + " where PAYS.owner_id = " + ownerID;
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) billingTable.getModel();

            double totalInstallments = 0;
            double totalAmount = 0;
            DecimalFormat df = new DecimalFormat("#.00"); 
            while (r.next()) {
                double installment = parseDouble(df.format(r.getDouble("balance")));       
                double amount = parseDouble(df.format(r.getDouble("tot_amount")));
                model.addRow(new Object[]{r.getString("due_date"), df.format(installment), df.format(amount)});

                totalInstallments += installment;
                totalAmount += amount;
            }
            totalInstallmentsLabel.setText("$" + df.format(totalInstallments));
            totalBalanceLabel.setText("$" + df.format(totalAmount));
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JLabel apptDateDetailLabel;
    private javax.swing.JLabel apptTimeDetailLabel;
    private javax.swing.JTable billingTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable medRecTable;
    private javax.swing.JTable medicaltable;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel numOfPetsLabel;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private javax.swing.JLabel petNameDetailLabel;
    private javax.swing.JTable petTable;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JLabel reasonDetailLabel;
    private javax.swing.JLabel totalBalanceLabel;
    private javax.swing.JLabel totalInstallmentsLabel;
    private javax.swing.JLabel vetDetailLabel;
    private javax.swing.JButton viewDetailsButton;
    // End of variables declaration//GEN-END:variables
    private int userID;
    private int ownerID;
    private Connection conn;
    private ArrayList<Integer> pets; //Used for appointment info
}
